# Object Tracking System

## Overview
This project implements a real-time object tracking system using YOLO (You Only Look Once) and DeepSORT. The system processes video streams from a user-selected source (either live camera or uploaded video), sends frames to a backend for processing, and displays the tracked results on the frontend.

## Features
- **User Input Options**: Choose between live camera streaming or uploading a video.
- **Real-time Processing**: Frames are sent to the backend for processing and displayed in the browser.
- **Backend Integration**: Uses Flask to handle video frames and process object tracking.
- **Frontend UI**: Built with Streamlit to enable seamless user interaction.
- **Optimized Performance**: Efficient frame processing for smooth streaming.

## Tech Stack
- **Frontend**: Streamlit, WebRTC for live video streaming
- **Backend**: Flask, OpenCV, YOLO, DeepSORT
- **Libraries Used**:
  - `streamlit`
  - `streamlit-webrtc`
  - `opencv-python`
  - `numpy`
  - `flask`
  - `requests`
  - `torch`, `ultralytics`

## Installation
### Prerequisites
Ensure you have Python installed (>=3.10) along with required dependencies.

### Clone the Repository
```bash
git clone https://github.com/mkhpan123/Furious-Tracker.git
cd object-tracking
```

### Install Dependencies
```bash
pip install -r requirements.txt
```

## Running the Project
### Start the Backend Server
```bash
cd backend
python app.py
```

### Start the Frontend
```bash
cd frontend
streamlit run app.py
```

## Usage
1. Open the Streamlit UI in your browser.
2. Choose an option: **Live Camera** or **Upload Video**.
3. If using live camera, allow browser permissions.
4. If uploading, select a video file.
5. The processed video will be displayed with tracking results.

## Project Structure
```
object-tracking/
│── backend/
│   ├── app.py  # Flask backend handling video processing
│   ├── yolo_model.py  # YOLO object detection
│   ├── deepsort.py  # DeepSORT tracking
│── frontend/
│   ├── app.py  # Streamlit UI
│   ├── video_streamer.py  # Handles WebRTC and video uploads
│── models/  # Pre-trained YOLO and DeepSORT weights
│── README.md
│── requirements.txt
```

## Future Enhancements
- Optimize WebRTC streaming.
- Allow object filtering and custom detection.
- Implement multi-object tracking with improved efficiency.

## Contributors
- Sahil Kumar Singh
- Team Members (5 total)

## License
This project is licensed under the MIT License.

